{"version":3,"sources":["components/NavBar.js","components/Jumbotron.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","react_default","a","createElement","className","href","currentScore","highestScore","Jumbotron","Game","images","map","image","index","key","src","imgUrl","onClick","event","keepScore","App","state","clickedCards","_this","includes","id","alert","setState","concat","Object","toConsumableArray","components_NavBar","this","components_Jumbotron","components_Game","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yQAwBeA,MAtBf,SAAgBC,GACd,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,+BACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBC,KAAK,KAApC,YAIFJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWC,KAAK,KAA7B,yBAIFJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAWC,KAAK,KAA7B,UACUL,EAAMM,aADhB,iBAC4CN,EAAMO,iBCA3CC,MAdf,WACE,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,eACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,wFCUOK,MAdf,SAAcT,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACZM,EAAOC,IAAI,SAACC,EAAOC,GAAR,OACVZ,EAAAC,EAAAC,cAAA,OACEW,IAAKD,EACLE,IAAKH,EAAMI,OACXC,QAAS,SAAAC,GAAK,OAAIlB,EAAMmB,UAAUD,EAAON,UC2BpCQ,6MA/BbC,MAAQ,CACNd,aAAc,EACdD,aAAc,EACdgB,aAAc,MAGhBH,UAAY,SAACD,EAAON,GACdW,EAAKF,MAAMC,aAAaE,SAASZ,EAAMa,IACzCC,MAAM,aAENH,EAAKI,SAAS,CACZrB,aAAciB,EAAKF,MAAMf,aAAe,EACxCgB,aAAY,GAAAM,OAAAC,OAAAC,EAAA,EAAAD,CAAMN,EAAKF,MAAMC,cAAjB,CAA+BV,EAAMa,gFAMrD,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4B,EAAD,CACEzB,aAAc0B,KAAKX,MAAMf,aACzBC,aAAcyB,KAAKX,MAAMd,eAE3BN,EAAAC,EAAAC,cAAC8B,EAAD,MACAhC,EAAAC,EAAAC,cAAC+B,EAAD,CAAMf,UAAWa,KAAKb,oBA1BZgB,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7177b982.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction NavBar(props) {\n  return (\n    <ul className=\"nav nav-pills nav-justified\">\n      <li className=\"nav-item\">\n        <a className=\"nav-link active\" href=\"/\">\n          ReStart\n        </a>\n      </li>\n      <li className=\"nav-item\">\n        <a className=\"nav-link\" href=\"/\">\n          Simpsons Memory Test\n        </a>\n      </li>\n      <li className=\"nav-item\">\n        <a className=\"nav-link\" href=\"/\">\n          Score: {props.currentScore} | Top Score: {props.highestScore}\n        </a>\n      </li>\n    </ul>\n  );\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport \"../App.css\";\n\nfunction Jumbotron() {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\">\n      <div className=\"container\">\n        <h1 className=\"display-4\">Clicky Game</h1>\n        <p className=\"lead\">\n          Click an image to get a point, but don't click it twice, or you'll\n          lose!!!\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport images from \"../images.json\";\nimport \"../App.css\";\n\nfunction Game(props) {\n  return (\n    <div className=\"container2\">\n      {images.map((image, index) => (\n        <img\n          key={index}\n          src={image.imgUrl}\n          onClick={event => props.keepScore(event, image)}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default Game;\n","import React from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/NavBar.js\";\nimport Jumbotron from \"./components/Jumbotron.js\";\nimport Game from \"./components/Game.js\";\n\nclass App extends React.Component {\n  state = {\n    highestScore: 0,\n    currentScore: 0,\n    clickedCards: []\n  };\n\n  keepScore = (event, image) => {\n    if (this.state.clickedCards.includes(image.id)) {\n      alert(\"Game Over\");\n    } else {\n      this.setState({\n        currentScore: this.state.currentScore + 1,\n        clickedCards: [...this.state.clickedCards, image.id]\n      });\n    }\n  };\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <NavBar\n          currentScore={this.state.currentScore}\n          highestScore={this.state.highestScore}\n        />\n        <Jumbotron />\n        <Game keepScore={this.keepScore} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}